#+OPTIONS: prop:nil title:t toc:nil \n:nil ::t |:t ^:{} -:t *:t ':t
* Org Mode RFC (~xml2rfc~) Exporter ~ox-rfc.el~

Build (master): [[https://travis-ci.org/choppsv1/org-rfc-export][https://travis-ci.org/choppsv1/org-rfc-export.svg?branch=master]]
MELPA: [[https://melpa.org/#/ox-rfc][https://melpa.org/packages/ox-rfc-badge.svg]]

This is an org mode export back-end to convert an Org mode formatted file into
~xml2rfc~ RFC format. Its direct output is XML that can be input to ~xml2rfc~ to
further format the file into text, HTML or PDF formats. The code does make some
assumptions about the organization of the Org mode file in order to properly
produce and correct RFC formatted and organized file.

Exporting directly to text, HTML and PDF is supported by automatically running
~xml2rfc~ on the exported XML; however, this document does not including details
on setting up ~xml2rfc~ (=pip install xml2rfc= usually works though!)

This software is seen as a good start, but there's plenty of room for
improvements and adding more features. I'm certainly hoping that others will
also help with contributions to improve the code.

** Quick Install/Use with Makefile:

~ox-rfc~ is available in =MELPA= (https://melpa.org/#/ox-rfc) so if you using
emacs packages you can simply install ~ox-rfc~ using your package setup, e.g.,


#+begin_src emacs-lisp
  (package-install 'ox-rfc)
#+end_src

If you do not use emacs packages (or emacs generally) you can still use a
=Makefile= rule to download the package. The Makefile below does this as well as
exporting your ORG file XML and building xml2rfc outputs (HTML, PDF, TXT files).

#+begin_src makefile
  ORG := example.org
  BASE := $(shell sed -e '/^\#+RFC_NAME:/!d;s/\#+RFC_NAME: *\(.*\)/\1/' $(ORG))
  VERSION := $(shell sed -e '/^\#+RFC_VERSION:/!d;s/\#+RFC_VERSION: *\([0-9]*\)/\1/' $(ORG))
  VBASE := $(BASE)-$(VERSION)
  all: $(BASE).xml $(VBASE).txt
  clean:
          rm -f $(BASE).xml $(VBASE).{txt,html,pdf}
  $(BASE).xml: $(ORG) ox-rfc.el
          emacs -Q --batch --eval '(setq org-confirm-babel-evaluate nil)' -l ./ox-rfc.el $< -f ox-rfc-export-to-xml
  %-$(VERSION).txt: %.xml
          xml2rfc --text -o $@ $<
  %-$(VERSION).html: %.xml
          xml2rfc --html -o $@ $<
  %-$(VERSION).pdf: %.xml
          xml2rfc --pdf -o $@ $<
  ox-rfc.el:
          curl -fLO 'https://raw.githubusercontent.com/choppsv1/org-rfc-export/master/ox-rfc.el'
#+end_src

** Formatting of this document.

This document is formatted in Org mode. If you are viewing it normal ASCII then
remember that "=" and "~" characters are used for highlighting literal text
(e.g., verbatim or code) and should not be included if being used in an example.

** Required Document Structure

The following is the expected structure of the Org mode RFC file:

- Headlined Sections
- Headline "References"
  - Headline "Normative References"
  - Headline "Informative References"
- Appendix Sections.

Additionally the following may appear anywhere; however, the first two make he
most sense to be placed at the top of the file:

- Required and optional export variable settings.
- Abstract export block
- Example, Quote and Source blocks.
- Lists
- Tables

*** Required and option export variables
**** Required export variables:

Two of three variables always need to be set. They are listed below. One of
~:AUTHOR~ or ~:EDITOR~ must be set and ~:TITLE~ must be set.

#+begin_example
  ,#+AUTHOR:
  ,#+EDITOR:
  ,#+TITLE:
#+end_example

**** Optional export variables:

#+begin_example
  ,#+AFFILIATION:
  ,#+EMAIL:
  ,#+RFC_ADD_AUTHOR:
  ,#+RFC_CATEGORY: std
  ,#+RFC_CONSENSUS: true
  ,#+RFC_IPR: trust200902
  ,#+RFC_NAME:
  ,#+RFC_OBSOLETES:
  ,#+RFC_STREAM: "IETF"
  ,#+RFC_UPDATES:
  ,#+RFC_VERSION: 00
  ,#+RFC_XML_VERSION: "3"
#+end_example

- AFFILIATION :: This is the affiliation for the first author.
- EMAIL :: This is the email for the first author.
- RFC_ADD_AUTHOR :: For multiple author documents. This option can be given
                    multiple times. The format uses a lisp list syntax: ~("John
                    Smith" "jsmith@example.com" "Example Company")~
- RFC_CATEGORY :: the ~category <rfc>~ attribute (default "std").
- RFC_CONSENSUS :: the ~consensus <rfc>~ attribute (default "true").
- RFC_IPR :: the ~ipr <rfc>~ attribute (default "trust200902").
- RFC_NAME :: The base name of the internet draft, if not specified the Org file
              name is used.
- RFC_OBSOLETES :: Comma separated list of RFC numbers this document obsoletes.
- RFC_STREAM :: The ~submissionType <rfc>~ attribute (default "IETF").
- RFC_UPDATES :: Comma separated list of RFC numbers this document updates.
- RFC_VERSION :: The standard Internet Draft version number (i.e., 2 base-10
                 digits with versions 0-9 given as 00-09). Default is "00".
- RFC_XML_VERSION :: The ~version <rfc>~ attribute (default "3").

*** "#+OPTIONS" export variables.

There are a couple export variables worth pointing out and are listed in the
following sub-sections.

Here's what I use for the standard export options settings:

#+begin_example
  # Do: title, toc:table-of-contents ::fixed-width-sections |tables
  # Do: ^:sup/sub with curly -:special-strings *:emphasis
  # Don't: prop:no-prop-drawers \n:preserve-linebreaks ':use-smart-quotes
  ,#+OPTIONS: prop:nil title:t toc:t \n:nil ::t |:t ^:{} -:t *:t ':nil
#+end_example

**** ~fnv~
Exported filenames by default do not include the RFC_VERSION component. To
include this in the file name set the ~fnv~ export option to =t= in the
~#+OPTIONS~ settings.

**** ~toc~
The ~toc~ export setting for generating a table of contents is honored.

**** ~^~
In addition it's usually a good idea to disable automatic superscript and
subscript processing (changing it to ={}= is suggested) otherwise words with
embedded underscores ('_') will transcode to subscripts.

*** Abstract

A special export block must be used to specify and abstract it looks like so:

#+begin_example
  ,#+beging_abstract
  This is the abstract of a document.
  ,#+end_abstract
#+end_example

*** Headlines

Normal Org mode headlined sections map to RFC sections. Headlines prior to the
"References" section are normal sections and headlines after "References" are
appendices.

*** Normative and Informative References

Reference sections are titled either "Normative References" or "Informative
References". ~ox-rfc.el~ then expects the actual references as sub-section
headlines below one of those 2 section headlines. ~ox-rfc.el~ automatically
expands certain standard references namely headline names that start with:
"3GPP", "I-D", "IEEE", "RFC", "W3C".

A ~:REF_STDXML~ property may be used to refer to the standard XML
bibliogrpahic entry if one wishes to pick a different headline to refer to it
(i.e., different reference text for use in the document).

One can also specify a URL to fetch the reference XML from using a ~:REF_URLXML~
property.

Finally, If no standard (or fetch-able XML) reference is available then the
bibliographic information may be specified as properties under the headline.

Here's an example:

#+caption: Example References Sections.
#+begin_example
  ,* Normative Refereneces
  ,** RFC2119
  ,* Informative Refereneces
  ,** RFC7991
  ,** W3GGEO
  :PROPERTIES:
  :REF_STDXML: W3C-CR-geolocation-API-20100907
  :END:
  ,** StudyScarlet
  :PROPERTIES:
  :REF_TITLE: A Study In Scarlet
  :REF_AUTHOR: Sir Arthur Conan Doyle
  :REF_DATE: Nov 1887
  :REF_CONTENT: Beeton's Christmas Annual, Ward Lock & Co
  :END:
#+end_example

The Properties for creating a custom reference are as follows:

- REF_ANNOTATION :: A value for the ~<annotation>~ xml2rfc element.
- REF_AUTHOR :: Author. If multiple authors need to be specify use an list in
                elisp format (e.g., ~("Author One" "Author Two")~)
- REF_EDITOR :: Same as ~:REF_AUTHOR:~ but has role set as editor.
- REF_CONTENT :: The value for the ~<refcontent>~ xml2rfc element.
- REF_DATE :: The value should be given in emacs ~parse-time-string~ format.
- REF_STDXML :: Used to rename the headline, the value should be the standard
                reference base (e.g., "RFC0791").
- REF_ORG :: The organization responsible for the document.
- REF_TARGET :: A URL to the referenced document if available.
- REF_TITLE :: Title of cited work.
- REF_URLXML :: A URL to fetch the reference XML from.

** Features

*** Character Formatting
NOTE: XML2RFC version 3 format only.

*Bold*, /italic/, =verbatim= and ~code~ styles are mapped to the ~xml2rfc~ elements
~<strong>~, ~<em>~, ~<tt>~ and ~<tt>~ respectively.

*** Citations and Links.

Internal and external references are supported (TODO: test external). For
internal links one can reference any anchor or section including the
sub-sub-section headlines under in the "References" headline. So e.g., a
reference to RFC7991 would be given using =[[RFC7991]]= Org mode reference
format and then a sub-sub-section headline under "Informative References" would
simple be "RFC7991" which ~ox-rfc.el~ will translate.

*** Figures and Artwork (Examples and Source code).

~ox-rfc.el~ maps example and source blocks to ~xml2rfc~ ~<artwork>~ elements.
Additionally if a ~#+CAPTION:~ is given for the block then it the artwork will be
placed inside a ~<figure>~ element with the ~#+CAPTION:~ value as the caption.

*** Blockquotes

NOTE: XML2RFC version 3 format only.

~#+begin_quote~ blocks are supported by ~xml2rfc~ version 3 format
~<blockquote>~.

TODO: ~xml2rfc~ version 2 support needs to be supported using ~<artwork>~

*** Lists

Lists are transformed correctly. Numbered, unnumbered and definition lists all
being supported. Definition lists are better supported in ~xml2rfc~ version 3
format using ~<dl>~ lists rather than more generic ~hanging~ style list format
of ~xml2rfc~ version 2 format.

TODO: Some work could be done here to better support bullet styles and more
numbering formats.

*** Tables

Tables are translated to ~<thead>~, ~<tbody>~, ~<tr>~, ~<td>~ table elements if
~xml2rfc~ version 3 (the default), otherwise they are quoted in ~<artwork>~ for
~xml2rfc~ version 2 format.

#+TEXINFO_FILENAME: ox-rfc.info
#+TEXINFO_HEADER: @syncodeindex pg cp
#+TEXINFO_DIR_CATEGORY: Org Mode: (org)
#+TEXINFO_DIR_TITLE: RFC Export
#+TEXINFO_DIR_DESC: Exporting to IETF RFC XML format.
#+TEXINFO_PRINTED_TITLE: IETF RFC XML Export
